@page "/user/login"
@using SleekFlowTodoListWebAssem.Client.Data.Models.Users;
@inject HttpClient Http
@inject IJSRuntime jsr

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="OnValid" style="max-width:500px;">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-2">
		<InputText class="form-control" @bind-Value="user.Email" placeholder="Enter Email"></InputText>
	</div>
	<div class="mb-2">
		<InputText type="password" class="form-control" @bind-Value="user.Password" placeholder="Enter Password"></InputText>
	</div>
	<div class="mb-2 text-right">
		<button class="btn btn-secondary" disabled="@isDisabled">login</button>
	</div>
</EditForm>

@code {
	SleekFlowTodoListWebAssem.Client.Data.Models.Users.UserLogin user = new SleekFlowTodoListWebAssem.Client.Data.Models.Users.UserLogin();
	string message = string.Empty;
	bool isDisabled = false;

	private async Task OnValid()
	{
		isDisabled = true;
		using (var msg = await Http.PostAsJsonAsync<SleekFlowTodoListWebAssem.Client.Data.Models.Users.UserLogin>("/api/auth/login", user, System.Threading.CancellationToken.None))
		{
			if (msg.IsSuccessStatusCode)
			{
				UserLoginResult result = await msg.Content.ReadFromJsonAsync<UserLoginResult>();
				message = result?.AuthToken ?? string.Empty;
				isDisabled = false;

				await jsr.InvokeVoidAsync("localStorage.setItem", "userAuthToken", message).ConfigureAwait(false);
				await jsr.InvokeVoidAsync("localStorage.setItem", "userDisplayName", "default").ConfigureAwait(false);
				await jsr.InvokeVoidAsync("localStorage.setItem", "userEmail", user.Email).ConfigureAwait(false);
			}
		}
	}
}